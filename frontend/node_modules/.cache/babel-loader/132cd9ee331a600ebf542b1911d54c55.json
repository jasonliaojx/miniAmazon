{"ast":null,"code":"import axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from '../constants/userConstants';\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer ' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["/Users/shichen/Desktop/mini_amazon_fs/frontend/src/actions/userActions.js"],"names":["axios","Cookie","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_SIGNIN_FAIL","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_UPDATE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","update","userId","name","email","password","dispatch","getState","userSignin","userInfo","type","payload","data","Axios","put","headers","Authorization","token","set","JSON","stringify","error","message","signin","post","register","logout","remove"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_SIGNIN_FAIL, USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_UPDATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS } from '../constants/userConstants';\n\nconst update = ({ userId, name, email, password }) => async (dispatch, getState) => {\n    const { userSignin: { userInfo } } = getState();\n    dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password } });\n    try {\n      const { data } = await Axios.put(\"/api/users/\" + userId,\n        { name, email, password }, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n      Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n      dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n    }\n  }\n\nconst signin = (email, password) => async (dispatch) => {\n    dispatch({type: USER_SIGNIN_REQUEST, payload: {email, password}});\n    try {\n        const {data} = await axios.post(\"/api/users/signin\", {email, password});\n        dispatch({type: USER_SIGNIN_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({type: USER_SIGNIN_FAIL, payload: error.message});\n    }\n}\n\nconst register = (name, email, password) => async (dispatch) => {\n    dispatch({type: USER_REGISTER_REQUEST, payload: {name, email, password}});\n    try {\n        const {data} = await axios.post(\"/api/users/register\", {name, email, password});\n        dispatch({type: USER_REGISTER_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({type: USER_REGISTER_FAIL, payload: error.message});\n    }\n}\n\nconst logout = () => (dispatch) => {\n    Cookie.remove(\"userInfo\");\n    dispatch({ type: USER_LOGOUT})\n  }\n\nexport {signin, register, logout, update};"]},"metadata":{},"sourceType":"module"}